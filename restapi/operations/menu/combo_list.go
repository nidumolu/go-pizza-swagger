// Code generated by go-swagger; DO NOT EDIT.

package menu

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ComboListHandlerFunc turns a function with the right signature into a combo list handler
type ComboListHandlerFunc func(ComboListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ComboListHandlerFunc) Handle(params ComboListParams) middleware.Responder {
	return fn(params)
}

// ComboListHandler interface for that can handle valid combo list params
type ComboListHandler interface {
	Handle(ComboListParams) middleware.Responder
}

// NewComboList creates a new http.Handler for the combo list operation
func NewComboList(ctx *middleware.Context, handler ComboListHandler) *ComboList {
	return &ComboList{Context: ctx, Handler: handler}
}

/* ComboList swagger:route GET /menu menu comboList

Get list of your favourite pizzas

It returns a list of nested objects which contains all categories and sub-categories required to create menu

*/
type ComboList struct {
	Context *middleware.Context
	Handler ComboListHandler
}

func (o *ComboList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewComboListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
